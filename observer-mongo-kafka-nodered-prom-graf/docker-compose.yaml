version: '3.3'
services:
  observer:
    restart: always
    container_name: docker_demo_5_observer
    image: observertc/observer:1.0.0-beta
    links:
      - kafka
    ports:
      - 7080:7080
    environment:
      - INITIAL_WAITING_TIME_IN_S=30
      - MICRONAUT_CONFIG_FILES=/config/observer-config.yaml
    depends_on:
      - kafka
    volumes:
      - ./observer:/config

  mongodb:
    image: mongo:4.2
    container_name: docker_demo_5_mongo
    hostname: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
  
  mongo-express:
    image: mongo-express
    container_name: docker_demo_5_mongo_express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: docker_demo_5_mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    depends_on:
      - mongodb

  zookeeper:
    container_name: docker_demo_5_zookeeper
    image: confluentinc/cp-zookeeper:5.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    container_name: docker_demo_5_kafka
    image: confluentinc/cp-kafka:5.5.1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: docker_demo_5_zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://docker_demo_5_kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka-setup
    container_name: docker_demo_5_kafka_setup
    depends_on:
      - kafka
    command: "bash -c ' cub kafka-ready -b docker_demo_5_kafka:29092 1 20 &&
                        kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 12 --replication-factor 1 --topic ortc_demo_5_reports && \
                        sleep 30'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  nodered:
    image: observertc/node-red:latest
    # image: nodered/node-red:latest
    container_name: docker_demo_5_nodered
    # environment: 
      # Set this up if you want your node-red to be protected.
      # to login: amdin/NODE_RED_PASSWORD
      # not a big security btw, but better than nothing.
      # - NODE_RED_ADMIN_PASSWORD=password
    ports:
      - 1880:1880
    volumes:
      - ./node_red_data:/data


  prometheus:
    container_name: docker_demo_5_prom
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    restart: always
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: '472'
    restart: always
    # environment:
      # GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    ports:
      - 3500:3000
    depends_on:
      - prometheus
  
volumes:
  prometheus_data: {}
  grafana_data: {}